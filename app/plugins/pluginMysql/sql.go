package pluginMysql

/*
select
	TABLE_NAME as pureName,
	TABLE_ROWS as tableRowCount,
	case when ENGINE='InnoDB' then CREATE_TIME else coalesce(UPDATE_TIME, CREATE_TIME) end as modifyDate
from information_schema.tables
where TABLE_SCHEMA = '#DATABASE#' and TABLE_TYPE='BASE TABLE' and TABLE_NAME =OBJECT_ID_CONDITION;
*/
func tablesSQL() string {
	return `
	select
		TABLE_NAME as pureName,
		TABLE_ROWS as tableRowCount,
		case when ENGINE='InnoDB' then CREATE_TIME else coalesce(UPDATE_TIME, CREATE_TIME) end as modifyDate
	from information_schema.tables
	where TABLE_SCHEMA = '#DATABASE#' and TABLE_TYPE='BASE TABLE' and TABLE_NAME =OBJECT_ID_CONDITION;
`
}

/*
SELECT
	TABLE_NAME AS pureName,
	COLUMN_NAME AS columnName,
	IS_NULLABLE AS isNullable,
	DATA_TYPE AS dataType,
	CHARACTER_MAXIMUM_LENGTH AS charMaxLength,
	NUMERIC_PRECISION AS numericPrecision,
	NUMERIC_SCALE AS numericScale,
	COLUMN_DEFAULT AS defaultValue,
	COLUMN_COMMENT AS columnComment,
	COLUMN_TYPE AS columnType,
	EXTRA AS extra
FROM
	information_schema.COLUMNS
WHERE
	TABLE_SCHEMA = 'yami_shops'
	AND TABLE_NAME = 'tz_sku'
*/
func columnsSQL() string {
	return `
		SELECT
            TABLE_NAME AS pureName,
			COLUMN_NAME AS columnName,
			IS_NULLABLE AS isNullable,
			DATA_TYPE AS dataType,
			CHARACTER_MAXIMUM_LENGTH AS charMaxLength,
			NUMERIC_PRECISION AS numericPrecision,
			NUMERIC_SCALE AS numericScale,
			COLUMN_DEFAULT AS defaultValue,
			COLUMN_COMMENT AS columnComment,
			COLUMN_TYPE AS columnType,
			EXTRA AS extra 
		FROM
			information_schema.COLUMNS 
		WHERE
			TABLE_SCHEMA = ? 
			AND TABLE_NAME = ? 
		ORDER BY
			ORDINAL_POSITION`
}

/*
SELECT
	TABLE_CONSTRAINTS.CONSTRAINT_NAME AS constraintName,
	TABLE_CONSTRAINTS.TABLE_NAME AS pureName,
	KEY_COLUMN_USAGE.COLUMN_NAME AS columnName
FROM
	INFORMATION_SCHEMA.TABLE_CONSTRAINTS
	INNER JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE ON TABLE_CONSTRAINTS.TABLE_NAME = KEY_COLUMN_USAGE.TABLE_NAME
	AND TABLE_CONSTRAINTS.CONSTRAINT_NAME = KEY_COLUMN_USAGE.CONSTRAINT_NAME
	AND TABLE_CONSTRAINTS.CONSTRAINT_SCHEMA = KEY_COLUMN_USAGE.CONSTRAINT_SCHEMA
WHERE
	TABLE_CONSTRAINTS.CONSTRAINT_SCHEMA = 'yami_shops'
	AND TABLE_CONSTRAINTS.TABLE_NAME = 'tz_sku'
	AND TABLE_CONSTRAINTS.CONSTRAINT_TYPE = 'PRIMARY KEY'
ORDER BY
	KEY_COLUMN_USAGE.ORDINAL_POSITION
*/
func primaryKeysSQL() string {
	return `SELECT
		TABLE_CONSTRAINTS.CONSTRAINT_NAME AS constraintName,
		TABLE_CONSTRAINTS.TABLE_NAME AS pureName,
		KEY_COLUMN_USAGE.COLUMN_NAME AS columnName 
	FROM
		INFORMATION_SCHEMA.TABLE_CONSTRAINTS
		INNER JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE ON TABLE_CONSTRAINTS.TABLE_NAME = KEY_COLUMN_USAGE.TABLE_NAME 
		AND TABLE_CONSTRAINTS.CONSTRAINT_NAME = KEY_COLUMN_USAGE.CONSTRAINT_NAME 
		AND TABLE_CONSTRAINTS.CONSTRAINT_SCHEMA = KEY_COLUMN_USAGE.CONSTRAINT_SCHEMA 
	WHERE
		TABLE_CONSTRAINTS.CONSTRAINT_SCHEMA = ?
		AND TABLE_CONSTRAINTS.TABLE_NAME = ? 
		AND TABLE_CONSTRAINTS.CONSTRAINT_TYPE = 'PRIMARY KEY' 
	ORDER BY
		KEY_COLUMN_USAGE.ORDINAL_POSITION`
}

func foreignKeysSQL() {

}
func tableModificationsSQL() string {
	return `select 
	TABLE_NAME as pureName, 
	TABLE_TYPE as objectType,
	TABLE_ROWS as tableRowCount,
	case when ENGINE='InnoDB' then CREATE_TIME else coalesce(UPDATE_TIME, CREATE_TIME) end as modifyDate 
from information_schema.tables 
where TABLE_SCHEMA = ?`
}
